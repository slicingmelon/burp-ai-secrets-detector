# AI Secrets Detector Configuration
# Version of this config file - should match extension version
version = "1.7.1"

[settings]
# File extensions to skip during scanning (binary/media files unlikely to contain secrets)
# Categories: Media files, Image files, Archive files, Application packages, Executables, Document formats, Fonts, Binary/misc formats, Stylesheets
excluded_file_extensions = ["3g2", "3gp", "aac", "aif", "aifc", "aiff", "au", "avi", "flac", "flv", "m3u", "m4a", "m4v", "mid", "midi", "mkv", "mov", "mp2", "mp3", "mp4", "mpa", "mpe", "mpeg", "mpg", "mpv2", "oga", "ogg", "ogv", "ogx", "ra", "ram", "rmi", "snd", "wav", "weba", "webm", "wma", "wmv", "bmp", "gif", "ico", "ief", "jfif", "jpe", "jpeg", "jpg", "pbm", "pgm", "png", "pnm", "ppm", "ras", "raw", "rgb", "svg", "tiff", "webp", "xbm", "xpm", "xwd", "psd", "ai", "eps", "cmx", "7z", "arc", "bz", "bz2", "gz", "rar", "tar", "zip", "zipx", "xz", "lz", "lzma", "apk", "jar", "war", "ear", "mpkg", "bin", "cod", "com", "exe", "msi", "dll", "so", "dylib", "app", "deb", "rpm", "pkg", "dmg", "iso", "img", "abw", "azw", "doc", "docx", "epub", "mpp", "odp", "ods", "odt", "pages", "numbers", "keynote", "pdf", "ppt", "pptx", "rtf", "vsd", "xls", "xlsx", "eot", "otf", "ttf", "woff", "woff2", "dat", "mdb", "accdb", "o", "obj", "swf", "fla", "xul", "css"]

# MIME types to skip during scanning (binary/media content unlikely to contain secrets)
# Categories: Images, Fonts, Media, Applications, Documents
excluded_mime_types = ["IMAGE_BMP", "IMAGE_GIF", "IMAGE_JPEG", "IMAGE_PNG", "IMAGE_SVG_XML", "IMAGE_TIFF", "IMAGE_UNKNOWN", "FONT_WOFF", "FONT_WOFF2", "SOUND", "VIDEO", "APPLICATION_FLASH", "RTF", "CSS", "APPLICATION_UNKNOWN", "UNRECOGNIZED"]

# Number of worker threads for processing HTTP responses
workers = 20

# Only scan requests/responses that are in the defined scope in Burp
in_scope_only = true

# Enable logging to the extension's log tab
logging_enabled = false

# Enable randomness algorithm for detecting generic secrets
randomness_algorithm_enabled = true

# Minimum length for generic secret detection (randomness algorithm)
generic_secret_min_length = 15

# Maximum length for generic secret detection (randomness algorithm)
generic_secret_max_length = 80

# Threshold for duplicate secret detection (same secret value across target host)
duplicate_threshold = 5

# Maximum number of highlights per secret type per response
max_highlights_per_secret = 3

# Tools from which to process messages
enabled_tools = ["TARGET", "PROXY", "SCANNER", "EXTENSIONS"]

# Exclusions - Skip scanning for specific patterns/contexts
# type: "host", "url", "context", "path", "parameter"
# regex: Pattern to match against the specified scope
# pattern_name: "*" for all patterns, or specific pattern name

# Example exclusions (uncomment and modify as needed):
# [[exclusions]]
# type = "host"
# regex = '''^.*\.example\.com$'''
# pattern_name = "*"

# [[exclusions]]
# type = "context"
# regex = '''<meta name="csrf-token" content="[^"]{32}">'''
# pattern_name = "Generic Secret v2"

# Working example (remove the # to activate):
#[[exclusions]]
#type = "context"
#regex = '''<meta name=\"csrf-token\" content=\"([\w+./=~\\`^]{15,80})\">'''
#pattern_name = "Generic Secret v2"

# Secret detection patterns
# Each pattern has:
# - name: The name of the secret type, must be unique
# - prefix: Regex pattern that is prepended, usually non-capturing groups (use '''regexpattern''' for literal expressions)
# - pattern: Main regex pattern that captures the secret (use capture groups) (use '''regexpattern''' for literal expressions)
# - suffix: Regex pattern that is appended, usually non-capturing groups (use '''regexpattern''' for literal expressions)

# Note that you do not need to double escape the regex
# (e.g., use \s instead of \\s, \b instead of \\b, etc.)
# because TOML triple-quoted strings preserve backslashes as-is.

# Empty patterns are accepted as '' or ''''''

[[patterns]]
name = "URL with Credentials"
prefix = ''''''
pattern = '''(?i)([A-Za-z]+://\S{3,50}:(?:\S{4,64})@(?:\[[A-Fa-f0-9:]+\]|[\dA-Za-z#%&+./:=?_~-]+)(?::\d+)?)'''
suffix = ''''''

[[patterns]]
name = "Age Secret Key"
prefix = ''''''
pattern = '''(AGE-SECRET-KEY-1[0-9A-Z]{58})'''
suffix = ''''''

[[patterns]]
name = "Algolia Key"
prefix = '''(?i)(?:algolia|docsearch|apiKey)(?:.|[\n\r\t]){0,40}?'''
pattern = '''\b([a-zA-Z0-9]{32})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "Anthropic API Key"
prefix = ''''''
pattern = '''\b(sk-ant-(?:admin01|api03)-[\w\-]{93}AA)\b'''
suffix = ''''''

[[patterns]]
name = "Azure Storage Account Key"
prefix = '''(?i)(?:account)?key\s*[:=]\s*'''
pattern = '''([0-9+/=A-Za-z]{88})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "Azure AD Client Secret"
prefix = ''''''
pattern = '''\b([a-zA-Z0-9_~.]{3}\dQ~[a-zA-Z0-9_~.-]{31,34})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "AWS Access Key"
prefix = ''''''
pattern = '''\b((?:A3T[A-Z0-9]|AKIA|ASIA|ABIA|ACCA)[A-Z0-9]{16,20})\b'''
suffix = ''''''

[[patterns]]
name = "Bcrypt Hash"
prefix = ''''''
pattern = '''\b(\$2[abxy]\$\d{2}\$[./A-Za-z0-9]{53})\b'''
suffix = ''''''

[[patterns]]
name = "Fastly API Key"
prefix = '''(?i)[\w.-]{0,50}?(?:fastly)(?:[ \t\w.-]{0,20})[\s'"]{0,3}(?:=|>|:{1,3}=|\|\||:|=>|\?=|,)[`'"\s=]{0,5}'''
pattern = '''([a-z0-9=_\-]{32})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "GitHub Personal Access Token"
prefix = ''''''
pattern = '''((?:gh[oprsu]|github_pat)_[0-9A-Za-z_]{36})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "GitLab Token"
prefix = ''''''
pattern = '''(glpat-[0-9A-Za-z_=-]{20,22})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "Cloudflare API Token"
prefix = '''(?i)(?:cloudflare)(?:.|[\n\r\t]){0,40}?'''
pattern = '''\b([A-Za-z0-9_-]{40})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "Cloudflare Global API Key"
prefix = '''(?i)(?:cloudflare)(?:.|[\n\r\t]){0,40}?'''
pattern = '''\b([A-Za-z0-9_-]{37})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "Cloudflare Origin CA Key"
prefix = ''''''
pattern = '''\b(v1\.0-[A-Za-z0-9-]{171})\b'''
suffix = ''''''

[[patterns]]
name = "DigitalOcean Personal Access Token"
prefix = ''''''
pattern = '''\b((?:dop|doo|dor)_v1_[a-f0-9]{64})\b'''
suffix = ''''''

[[patterns]]
name = "Google Cloud Platform (GCP) API Key"
prefix = ''''''
pattern = '''\b(AIza[A-Za-z0-9_-]{35})\b'''
suffix = ''''''

[[patterns]]
name = "Heroku API Key v2"
prefix = ''''''
pattern = '''\b(HRKU-AA[0-9a-zA-Z_-]{58})\b'''
suffix = ''''''

[[patterns]]
name = "Mailgun Signing Key"
prefix = '''(?i)[\w.-]{0,50}?(?:mailgun)(?:[ \t\w.-]{0,20})[\s'"]{0,3}(?:=|>|:{1,3}=|\|\||:|=>|\?=|,)[`'"\s=]{0,5}'''
pattern = '''([a-h0-9]{32}-[a-h0-9]{8}-[a-h0-9]{8})'''
suffix = '''\b'''

[[patterns]]
name = "Mailgun Private API Token"
prefix = '''(?i)[\w.-]{0,50}?(?:mailgun)(?:[ \t\w.-]{0,20})[\s'"]{0,3}(?:=|>|:{1,3}=|\|\||:|=>|\?=|,)[`'"\s=]{0,5}'''
pattern = '''(key-[a-f0-9]{32})'''
suffix = '''\b'''

[[patterns]]
name = "OpenAI API Key"
prefix = ''''''
pattern = '''\b(sk-(?:proj|svcacct|admin)-(?:[A-Za-z0-9_-]{74}|[A-Za-z0-9_-]{58})T3BlbkFJ(?:[A-Za-z0-9_-]{74}|[A-Za-z0-9_-]{58}))\b'''
suffix = ''''''

[[patterns]]
name = "OpenAI API Key Legacy"
prefix = ''''''
pattern = '''\b(sk-[a-zA-Z0-9]{20}T3BlbkFJ[a-zA-Z0-9]{20})\b'''
suffix = ''''''

[[patterns]]
name = "NPM Token (modern)"
prefix = ''''''
pattern = '''(npm_[0-9A-Za-z]{36})'''
suffix = ''''''

[[patterns]]
name = "NPM Token (legacy)"
prefix = ''''''
pattern = '''(//.+/:_authToken=[0-9A-Za-z_-]+)'''
suffix = ''''''

[[patterns]]
name = "Postman API Token"
prefix = ''''''
pattern = '''\b(PMAK-[a-f0-9]{24}\-[a-f0-9]{34})\b'''
suffix = ''''''

[[patterns]]
name = "Google reCAPTCHA Key"
prefix = '''\b'''
pattern = '''(6[LM][A-Za-z0-9_-]{38})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "Slack Token"
prefix = ''''''
pattern = '''(xox[aboprs]-(?:\d+-)+[\da-z]+)'''
suffix = ''''''

[[patterns]]
name = "Slack App Token"
prefix = ''''''
pattern = '''(xapp-\d-[A-Z0-9]+-\d+-[a-z0-9]+)'''
suffix = ''''''

[[patterns]]
name = "Slack Bot Token"
prefix = ''''''
pattern = '''(xoxb-[0-9]{10,13}-[0-9]{10,13}[a-zA-Z0-9-]*)'''
suffix = ''''''

[[patterns]]
name = "Slack Legacy Bot Token"
prefix = ''''''
pattern = '''(xoxb-[0-9]{8,14}-[a-zA-Z0-9]{18,26})'''
suffix = ''''''

[[patterns]]
name = "Slack User Token"
prefix = ''''''
pattern = '''(xox[pe](?:-[0-9]{10,13}){3}-[a-zA-Z0-9-]{28,34})'''
suffix = ''''''

[[patterns]]
name = "Slack Legacy Token"
prefix = ''''''
pattern = '''(xox[os]-\d+-\d+-\d+-[a-fA-F\d]+)'''
suffix = ''''''

[[patterns]]
name = "Slack Config Access Token"
prefix = ''''''
pattern = '''(xoxe\.xox[bp]-\d-[A-Z0-9]{163,166})'''
suffix = ''''''

[[patterns]]
name = "Slack Config Refresh Token"
prefix = ''''''
pattern = '''(xoxe-\d-[A-Z0-9]{146})'''
suffix = ''''''

[[patterns]]
name = "Slack Legacy Workspace Token"
prefix = ''''''
pattern = '''(xox[ar]-(?:\d-)?[0-9a-zA-Z]{8,48})'''
suffix = ''''''

[[patterns]]
name = "Slack Webhook URL"
prefix = ''''''
pattern = '''((?:https?://)?hooks\.slack\.com/(?:services|workflows|triggers)/[A-Za-z0-9+/]{43,56})'''
suffix = ''''''

[[patterns]]
name = "Microsoft Teams Webhook"
prefix = ''''''
pattern = '''(https://[a-z0-9]+\.webhook\.office\.com/webhookb2/[a-z0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}@[a-z0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}/IncomingWebhook/[a-z0-9]{32}/[a-z0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12})'''
suffix = ''''''

[[patterns]]
name = "SendGrid API Key"
prefix = ''''''
pattern = '''(SG\.[\dA-Za-z_-]{22}\.[\dA-Za-z_-]{43})'''
suffix = ''''''

[[patterns]]
name = "Stripe API Key"
prefix = ''''''
pattern = '''\b((?:sk|rk)_(?:test|live|prod)_[a-zA-Z0-9]{10,99})\b'''
suffix = ''''''

[[patterns]]
name = "Square Access Token"
prefix = ''''''
pattern = '''\b((?:EAAA|sq0atp-)[\w-]{22,60})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "Squarespace Access Token"
prefix = '''(?i)[\w.-]{0,50}?(?:squarespace)(?:[ \t\w.-]{0,20})[\s'"]{0,3}(?:=|>|:{1,3}=|\|\||:|=>|\?=|,)[`'"\s=]{0,5}'''
pattern = '''([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})'''
suffix = '''\b'''

[[patterns]]
name = "Telegram Bot API Token"
prefix = '''(?i)(?:telegram|tgram://)(?:.|[\n\r\t]){0,40}?'''
pattern = '''\b([0-9]{8,10}:[a-zA-Z0-9_-]{35})\b'''
suffix = ''''''

[[patterns]]
name = "Shopify Access Token"
prefix = ''''''
pattern = '''(shpat_[a-fA-F0-9]{32})'''
suffix = ''''''

[[patterns]]
name = "Shopify Custom Access Token"
prefix = ''''''
pattern = '''(shpca_[a-fA-F0-9]{32})'''
suffix = ''''''

[[patterns]]
name = "Shopify Private App Access Token"
prefix = ''''''
pattern = '''(shppa_[a-fA-F0-9]{32})'''
suffix = ''''''

[[patterns]]
name = "Shopify Shared Secret"
prefix = ''''''
pattern = '''(shpss_[a-fA-F0-9]{32})'''
suffix = ''''''

[[patterns]]
name = "Twilio API Key"
prefix = ''''''
pattern = '''\b((?:AC|SK)[0-9a-fA-F]{32})\b'''
suffix = ''''''

[[patterns]]
name = "Mailchimp API Key"
prefix = ''''''
pattern = '''([0-9a-f]{32}-us[0-9]{1,2})'''
suffix = ''''''

[[patterns]]
name = "Intra42 Secret"
prefix = ''''''
pattern = '''(s-s4t2(?:af|ud)-[\da-f]{64})'''
suffix = ''''''

[[patterns]]
name = "Zendesk Secret Key"
prefix = '''(?i)[\w.-]{0,50}?(?:zendesk)(?:[ \t\w.-]{0,20})[\s'"]{0,3}(?:=|>|:{1,3}=|\|\||:|=>|\?=|,)[`'"\s=]{0,5}'''
pattern = '''([a-z0-9]{40})'''
suffix = '''\b'''

[[patterns]]
name = "Generic Private Key"
prefix = ''''''
pattern = '''(?i)(-----BEGIN[ A-Z0-9_-]{0,100}PRIVATE KEY(?: BLOCK)?-----[\s\S-]{64,}?KEY(?: BLOCK)?-----)'''
suffix = ''''''

[[patterns]]
name = "Generic Secret"
prefix = '''(?i:auth|credential|key|token|secret|pass|passwd|password)\w*[\"']?]?\s*(?:[:=]|:=|=>|<-|>|,)\s*(?:[\t "'`]|\\")?'''
pattern = '''([\w+./=~\-\\`^]{generic_secret_min_length,generic_secret_max_length})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "Generic Secret v2"
prefix = '''(?i:auth|credential|key|token|secret|pass|passwd|password)(?:.|[\n\r\t]){0,15}?'''
pattern = '''\b([\w+./=~\-\\`\^!@#$%&\*_<>;]{generic_secret_min_length,generic_secret_max_length})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''

[[patterns]]
name = "Generic Secret v3"
prefix = '''(?i:auth|credential|key|token|secret|pass|passwd|password)(?:.|[\n\r\t]){0,25}?'''
pattern = '''\b([\w+./=~\-\\`^]{generic_secret_min_length,generic_secret_max_length})'''
suffix = '''(?:[`'"\s;]|\\[nrt]|\\"|</|$)'''